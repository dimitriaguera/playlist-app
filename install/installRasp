#!/usr/bin/env bash

# Import helpers function
source helpers

## Get path of this file
path_of_this_file=$(dirname "$0")
path_of_this_file=$(cd "${path_of_this_file}" && pwd)

sudo apt update

say_blue "I updating the package lists"
ask_choice "Do I need to update the system ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	sudo apt upgrade -y
fi

ask_choice "Do I need to update system distribution ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	sudo apt dist-upgrade
fi

ask_choice "Do I need to update raspberry firmware ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	sudo rpi-update
fi

ask_choice "Do I need to install build-essential and cmake ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	sudo apt install -y build-essential
	sudo apt install -y cmake
fi

####### Node
ask_choice "Do I need to install nodejs with nvm ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	# This download and install nvm
	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
	export NVM_DIR="$HOME/.nvm"
	# This loads nvm
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
	# This loads nvm bash_completion
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
	command -v nvm
	source "${HOME}/.bashrc"
	# Install latest node lts
	nvm install --lts
	# Copy it in global (for every user)
	n=$(command -v node)
	n=${n%/bin/node}
	chmod -R 755 "$n/bin/*"
	sudo cp -r "$n/{bin,lib,share}" /usr/local
fi

####### MongoDB
ask_choice "Do I need to install MongoDb ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	mongodb=true
	sudo apt install -y mongodb
	sudo systemctl enable mongodb
	sudo systemctl stop mongodb
fi

####### Java
ask_choice "Do I need to install Java ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	sudo apt install -y default-jre
	sudo cp -r /usr/lib/jvm/java-8-openjdk-armhf/jre/lib/arm/client /usr/lib/jvm/java-8-openjdk-armhf/jre/lib/arm/server
	sudo apt install -y default-jre
fi

####### Elastic
ask_choice "Do I need to install Elastic ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	elastic=true

	# This version doesn't work on raspbian.
	#wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
	#sudo apt install -y apt-transport-https
	#echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
	#sudo apt update && sudo apt install -y elasticsearch

	wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.2.deb
	wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.2.deb.sha512
	# @todo stop if check is not OK
	shasum -a 512 -c elasticsearch-6.2.2.deb.sha512
	sudo dpkg -i elasticsearch-6.2.2.deb

	# Change memory of es
	say_green "How many memory do you want for elasticSearch (default : 180M ) ? "
	say_red "Don't forget the unit like g or m for giga and mega"
	read -r esmem
	if [ -z "$esmem" ]; then
		esmem='180m'
	fi
	#sudo sed -i'' 's|-Xms|-Xms'"${esmem}"'|d' /etc/elasticsearch/jvm.options
	#sudo sed -i'' 's|-Xmx|-Xmx'"${esmem}"'|d' /etc/elasticsearch/jvm.options
	sudo sed -i'' '/-Xms/c\-Xms'"${esmem}" /etc/elasticsearch/jvm.options
	sudo sed -i'' '/-Xmx/c\-Xmx'"${esmem}" /etc/elasticsearch/jvm.options

	sudo systemctl enable elasticsearch
	sudo systemctl stop elasticsearch
fi

####### PlaylistApp
say_blue "I am going to install playlistApp"
cd "${install_path}" || exit 0
say_blue "Install path is : ${install_path}"

## Install module
ask_choice "Do I need to run npm install ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	ask_choice "Do I need to install dev npm install ? " 0 no yes
	if [[ $BOTASK_ANSWER == 1 ]]; then
		npm install --production
		npm install --production # two times
	else
		npm install
		npm install # two times
	fi
fi

## Config of PlaylistApp
say_blue "I am going to config PlayListApp"
ask_choice "Do I need to make a default config file ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then

	say_green "Where is your music (default : ~/music)"
	read -r music_path
	if [ -z "$music_path" ]; then
		music_path="${HOME}/music"
	fi

	jwt=$(randpass 12)
	cp "${install_path}/config/conf/config.private.example.js" "${install_path}/config/conf/config.private.js"
	# No space after -i with space on linux it will bug
	sed -i'' 's|./data/music|'"${music_path}"'|' "${install_path}/config/conf/config.private.js"
	#sed -i'' 's|'"jwtSecret: 'SECRET'"'|"jwtSecret: '"${jwt}"'"|' "${install_path}/config/conf/config.private.js"
	sed -i'' "s|jwtSecret: 'SECRET'|jwtSecret: \'${jwt}\'|" "${install_path}/config/conf/config.private.js"
	cp "${install_path}/config/conf/config.public.example.js" "${install_path}/config/conf/config.public.js"
fi

## Build production dist
ask_choice "Do I need to build prod distribution (this doesn't work on raspberry) ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	npm run build-prod
fi

## Start mongo and elastic
if [ "$elastic" = true ]; then
	sudo systemctl start elasticsearch
fi

if [ "$mongodb" = true ]; then
	sudo systemctl start mongodb
fi

## Make systemD script
ask_choice "Do I need to make a systemD file for automatically run playlistapp ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
	makesysD
fi

say_red "The process to build the app is not possible on raspberry."
say_red "You have to do it on another computer and upload to the raspberry in the public/dist folder"
say_red "Normally now you can go to localhost:8080 to see the app"
say_blue "You can change port, music path, mongo acces in : ${install_path}/conf/config.private.js"

say_green "If you have problem. Do this."
say_green "* Check Node with :"
say_green "  - 'node --version'"
say_green "* Check Java with :"
say_green "  - 'java -version'"
say_green "* Check Mongodb with :"
say_green "  - 'sudo systemctl status mongodb'"
say_green "  - 'sudo nc -v localhost 27017'"
say_green "* Check Elasticsearch with :"
say_green "  - 'sudo systemctl status elasticsearch' but this is not very reliable"
say_green "  - 'sudo curl localhost:9200'"
say_green "* Check the playlistApp :"
say_green "  - 'sudo systemctl status playlistapp'"
say_green "* Reload systemD service :"
say_green "  - 'sudo systemctl --system daemon-reload && sudo systemctl restart playlistapp'"
