#!/usr/bin/env bash

######################## HELPERS

## Get path of this file
path_of_this_file=`dirname "$0"`
path_of_this_file=`( cd "${path_of_this_file}" && pwd )`

# colorize and formatting command line
green='\x1B[0;32m'
cyan='\x1B[1;36m'
blue='\x1B[0;34m'
grey='\x1B[1;30m'
red='\x1B[0;31m'
bold='\033[1m'
normal='\033[0m'

function say_blue {
  echo -e "${blue}${bold}$1${normal}"
}

function say_red {
  echo -e "${red}${bold}$1${normal}"
}

function say_green {
  echo -e "${green}${bold}$1${normal}"
}

function say_grey {
  echo -e "${green}$1${normal}"
}

## Ask Something With Choice
function ask_choice () {
#XXX: FANCIER select ALTERNATIVE
## $1     : MESSAGE
## $2     : DEFAULT (AS INDEX IN $choices) IF USER PROVIDES AN EMPTY ANSWER
## $3-n   : CHOICES (WITH UNIQUE LEADING CHARACTER, E.G: "yes" "no" "abort")
## returns: 0, AND SETS $BOTASK_ANSWER TO THE ANSWER'S INDEX WITHIN $choices

  ## EASE OUR DEVS' LIFE
  [[ $2 =~ ^-?[0-9]+$ ]] || fatal_prog_error "'$2' IS NOT AN INTEGER";

  local msg="$1" def_choice=$2; shift 2
  local choices=($@)
  local prompt="$BP"
  BOTASK_ANSWER="$def_choice"             #XXX: ACCESS TO USER'S CHOICE
  for c in "$@"; do
    if [[ "$c" == "${choices[$def_choice]}" ]]; then
      prompt="$prompt${bold}[${c:0:1}]${c:1}${normal} "
    else
      prompt="$prompt[${c:0:1}]${c:1} "
    fi
  done

  while true; do
    echo -ne "$BP$B_AWAKE "
    say_green "$msg"
    echo " "
    echo -ne "$prompt> "
    read ans
    for (( i=0; i<=${#choices[@]}-1; i++ )); do
      test -z $ans && return 0            #TDL: PRESSING SPACE (RETURN OK)
      c=${choices[$i]}
      if [[ "$ans" == ${c:0:1} ]]; then
        echo
        BOTASK_ANSWER=$i && return 0      #XXX: set -e SO RETURN 0
      fi
    done
    echo -e "\r$BP$B_EMBRS"               ## USER MISTYPED: EMBARRASSMENT
  done
}

path_of_this_file=`dirname "$0"`
path_of_this_file=`( cd "${path_of_this_file}" && pwd )`
install_path=''
function install_path_fct () {
  cd $path_of_this_file/../
  install_path=`pwd`
  cd $path_of_this_file
}
install_path_fct

# 	Generate a random password
#  		$1 = number of characters; defaults to 32
# 		remove LC_CTYPE in linux this is for mac
# 		you can remplace $CHAR by "a-zA-Z0-9-_\$\?\@\.\!"
#   -----------------------------------------------------------------------------------
function randpass() {
   cat /dev/urandom | env LC_CTYPE=C tr -cd "a-zA-Z0-9-_\$\?\@\.\!" | head -c ${1:-32}
}

function makesysD() {
  say_blue "Make a systemD script"

  say_grey "Link to /usr/local/bin"
  sudo ln -sf ${path_of_this_file}/playlistapp.init /usr/local/bin/playlistapp.init

  say_grey "Make script executable"
  sudo chmod u+x /usr/local/bin/playlistapp.init

  say_grey "Copy to /etc/systemd/system/playlistapp.service"
  sudo cp -rf ${path_of_this_file}/playlistapp.service /etc/systemd/system/playlistapp.service

  say_grey "Enable service"
  sudo systemctl enable playlistapp

  say_grey "Start service"
  sudo systemctl start playlistapp
}
######################## END HELPERS

####### System
sudo apt update

say_blue "I updating the package lists"
ask_choice "Do I need to update the system ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  sudo apt upgrade -y
fi

ask_choice "Do I need to update system distribution ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  sudo apt dist-upgrade
fi

ask_choice "Do I need to update raspberry firmware ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  sudo rpi-update
fi


ask_choice "Do I need to install build-essential and cmake ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  sudo apt install -y build-essential
  sudo apt install -y cmake
fi


####### Node
ask_choice "Do I need to install nodejs with nvm ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  # This download and install nvm
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
  export NVM_DIR="$HOME/.nvm"
  # This loads nvm
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  # This loads nvm bash_completion
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  command -v nvm
  source ~/.bashrc
  # Install latest node lts
  nvm install --lts
  # Copy it in global (for every user)
  n=$(which node)
  n=${n%/bin/node}
  chmod -R 755 $n/bin/*
  sudo cp -r $n/{bin,lib,share} /usr/local
fi

####### MongoDB
ask_choice "Do I need to install MongoDb ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  mongodb=true
  sudo apt install -y mongodb
  sudo systemctl enable mongodb
  sudo systemctl stop mongodb
fi

####### Java
ask_choice "Do I need to install Java ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  sudo apt install -y default-jre
  sudo cp -r /usr/lib/jvm/java-8-openjdk-armhf/jre/lib/arm/client /usr/lib/jvm/java-8-openjdk-armhf/jre/lib/arm/server
  sudo apt install -y default-jre
fi

####### Elastic
ask_choice "Do I need to install Elastic ? " 1 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  elastic=true

  # This version doesn't work on raspbian.
  #wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
  #sudo apt install -y apt-transport-https
  #echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
  #sudo apt update && sudo apt install -y elasticsearch

  wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.2.deb
  wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.2.deb.sha512
  # @todo stop if check is not OK
  shasum -a 512 -c elasticsearch-6.2.2.deb.sha512
  sudo dpkg -i elasticsearch-6.2.2.deb

  # Change memory of es
  say_green "How many memory do you want for elasticSearch (default : 180M ) ? "
  say_red "Don't forget the unit like g or m for giga and mega"
  read esmem
  if [ -z "$esmem" ]; then
   esmem='180m'
  fi
  #sudo sed -i'' 's|-Xms|-Xms'"${esmem}"'|d' /etc/elasticsearch/jvm.options
  #sudo sed -i'' 's|-Xmx|-Xmx'"${esmem}"'|d' /etc/elasticsearch/jvm.options
  sudo sed -i'' '/-Xms/c\-Xms'"${esmem}" /etc/elasticsearch/jvm.options
  sudo sed -i'' '/-Xmx/c\-Xmx'"${esmem}" /etc/elasticsearch/jvm.options

  sudo systemctl enable elasticsearch
  sudo systemctl stop elasticsearch
fi

####### PlaylistApp
say_blue "I am going to install playlistApp"
cd ${install_path}
say_blue "Install path is : ${install_path}"

## Install module
ask_choice "Do I need to run npm install ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  npm install
  npm install # two times
fi

## Config of PlaylistApp
say_blue "I am going to config PlayListApp"
say_green "Where is your music (default : ~/music ) ? "
read music_path
if [ -z "$music_path" ]; then
    music_path="~/music"
fi
jwt=$(randpass 12)
cp ${install_path}/config/conf/config.private.example.js ${install_path}/config/conf/config.private.js
# No space after -i'' with space on linux it will bug
sed -i'' 's|./data/music|'"${music_path}"'|' ${install_path}/config/conf/config.private.js
sed -i'' 's|'"jwtSecret: 'SECRET'"'|'"jwtSecret: '"${jwt}"'"'|' ${install_path}/config/conf/config.private.js
cp ${install_path}/config/conf/config.public.example.js ${install_path}/config/conf/config.public.js

## Build production dist
ask_choice "Do I need to build prod distribution (this doesn't work on raspberry) ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  npm run build-prod
fi

## Start mongo and elastic
if [ "$elastic" = true ] ; then
  sudo systemctl start elasticsearch
fi

if [ "$mongodb" = true ] ; then
  sudo systemctl start mongodb
fi

## Make systemD script
ask_choice "Do I need to make a systemD file for automatically run playlistapp ? " 0 no yes
if [[ $BOTASK_ANSWER == 1 ]]; then
  makesysD
fi

say_red "The process to build the app is not possible on raspberry."
say_red "You have to do it on another computer and upload to the raspberry in the public/dist folder"
say_red "Normally now you can go to localhost:8080 to see the app"
say_blue "You can change port, music path, mongo acces in : ${install_path}/conf/config.private.js"

say_green "If you have problem. Do this."
say_green "* Check Node with :"
say_green "  - 'node --version'"
say_green "* Check Java with :"
say_green "  - 'java -version'"
say_green "* Check Mongodb with :"
say_green "  - 'sudo systemctl status mongodb'"
say_green "  - 'sudo nc -v localhost 27017'"
say_green "* Check Elasticsearch with :"
say_green "  - 'sudo systemctl status elasticsearch' but this is not very reliable"
say_green "  - 'sudo curl localhost:9200'"
say_green "* Check the playlistApp :"
say_green "  - 'sudo systemctl status playlistapp'"