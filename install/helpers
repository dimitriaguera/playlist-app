#!/usr/bin/env bash

# Get path of this file
path_of_this_file=$(dirname "$0")
path_of_this_file=$(cd "${path_of_this_file}" && pwd)

# colorize and formatting command line
green='\x1B[0;32m'
cyan='\x1B[1;36m'
blue='\x1B[0;34m'
grey='\x1B[1;30m'
red='\x1B[0;31m'
bold='\033[1m'
normal='\033[0m'

function say_blue() {
	echo -e "${blue}${bold}$1${normal}"
}

function say_red() {
	echo -e "${red}${bold}$1${normal}"
}

function say_green() {
	echo -e "${green}${bold}$1${normal}"
}

function say_grey() {
	echo -e "${green}$1${normal}"
}

# 	Ask Something With Choice
# 		$1     : MESSAGE
# 		$2     : DEFAULT (AS INDEX IN $choices) IF USER PROVIDES AN EMPTY ANSWER
# 		$3-n   : CHOICES (WITH UNIQUE LEADING CHARACTER, E.G: "yes" "no" "abort")
# 		returns: 0, AND SETS $BOTASK_ANSWER TO THE ANSWER'S INDEX WITHIN $choices
#	------------------------------------------------------------
function ask_choice() {

	## EASE OUR DEVS' LIFE
	if ! [[ $2 =~ ^-?[0-9]+$ ]]; then
		say_red "'$2' IS NOT AN INTEGER"
		return 1
	fi

	local msg="$1"
	local def_choice=$2
	shift 2
	local choices=("$@")
	local prompt=""
	BOTASK_ANSWER="$def_choice" #XXX: ACCESS TO USER'S CHOICE
	for c in "$@"; do
		if [[ "$c" == "${choices[$def_choice]}" ]]; then
			prompt="${prompt}${blue}${bold}[${c:0:1}]${c:1}${normal} "
		else
			prompt="${prompt}[${c:0:1}]${c:1} "
		fi
	done

	while true; do
		say_green "$msg"
		echo -ne "$prompt> "
		read -r ans

		if [ -n "$ZSH_VERSION" ]; then
			# assume Zsh
			for ((i = 1; i <= ${#choices[@]}; i++)); do
				test -z "${ans}" && return 0 #TDL: PRESSING SPACE (RETURN OK)
				c=${choices[$i]}
				if [[ "${ans}" == "${c:0:1}" ]]; then
					echo
					BOTASK_ANSWER=$i && return 0 #XXX: set -e SO RETURN 0
				fi
			done
		elif [ -n "$BASH_VERSION" ]; then
			for ((i = 0; i <= ${#choices[@]} - 1; i++)); do
				test -z "${ans}" && return 0 #TDL: PRESSING SPACE (RETURN OK)
				c=${choices[$i]}
				if [[ "${ans}" == "${c:0:1}" ]]; then
					echo
					BOTASK_ANSWER=$i && return 0 #XXX: set -e SO RETURN 0
				fi
			done
		fi
		say_red "Please choose a valid answer" ## USER MISTYPED: EMBARRASSMENT
	done
}

install_path=''
function install_path_fct() {
	cd "$path_of_this_file/../" || return 1
	install_path=$(pwd)
	cd "$path_of_this_file" || return 1
}
install_path_fct

# 	Generate a random password
#  		$1 = number of characters; defaults to 32
# 		remove LC_CTYPE in linux this is for mac
# 		you can remplace $CHAR by "a-zA-Z0-9-_\$\?\@\.\!"
#   -----------------------------------------------------------------------------------
function randpass() {
	env LC_CTYPE=C tr -cd "a-zA-Z0-9-_\\$\\?\\@\\.\\!" </dev/urandom | head -c "${1:-32}"
}

function makesysD() {
	say_blue "Make a systemD script"

	say_grey "Link to /usr/local/bin"
	sudo ln -sf "${path_of_this_file}/playlistapp.init" "/usr/local/bin/playlistapp.init"

	say_grey "Make script executable"
	sudo chmod u+x /usr/local/bin/playlistapp.init

	say_grey "Copy to /etc/systemd/system/playlistapp.service"
	sudo cp -rf "${path_of_this_file}/playlistapp.service" "/etc/systemd/system/playlistapp.service"

	# Reload systemD service
	sudo systemctl --system daemon-reload

	say_grey "Enable service"
	sudo systemctl enable playlistapp

	say_grey "Start service"
	sudo systemctl start playlistapp
}
######################## END HELPERS
